//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `emoji.json`.
    static let emojiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emoji", pathExtension: "json")
    
    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "emoji", withExtension: "json")`
    static func emojiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojiJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `ArrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowDown")
    /// Image `ArrowUp`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowUp")
    /// Image `Boost`.
    static let boost = Rswift.ImageResource(bundle: R.hostingBundle, name: "Boost")
    /// Image `Camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera")
    /// Image `Follow`.
    static let follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow")
    /// Image `HomeOutline`.
    static let homeOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeOutline")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `MoreOutline`.
    static let moreOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoreOutline")
    /// Image `More`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "More")
    /// Image `NotificationOutline`.
    static let notificationOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "NotificationOutline")
    /// Image `Notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notification")
    /// Image `NowPlaying`.
    static let nowPlaying = Rswift.ImageResource(bundle: R.hostingBundle, name: "NowPlaying")
    /// Image `PeopleOutline`.
    static let peopleOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "PeopleOutline")
    /// Image `People`.
    static let people = Rswift.ImageResource(bundle: R.hostingBundle, name: "People")
    /// Image `PhotosInline`.
    static let photosInline = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhotosInline")
    /// Image `Reply`.
    static let reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reply")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `StreamingStatus`.
    static let streamingStatus = Rswift.ImageResource(bundle: R.hostingBundle, name: "StreamingStatus")
    /// Image `visibility-direct`.
    static let visibilityDirect = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-direct")
    /// Image `visibility-private`.
    static let visibilityPrivate = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-private")
    /// Image `visibility-public`.
    static let visibilityPublic = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-public")
    /// Image `visibility-unlisted`.
    static let visibilityUnlisted = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-unlisted")
    
    /// `UIImage(named: "ArrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArrowUp", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Boost", bundle: ..., traitCollection: ...)`
    static func boost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boost, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Follow", bundle: ..., traitCollection: ...)`
    static func follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeOutline", bundle: ..., traitCollection: ...)`
    static func homeOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "More", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MoreOutline", bundle: ..., traitCollection: ...)`
    static func moreOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NotificationOutline", bundle: ..., traitCollection: ...)`
    static func notificationOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NowPlaying", bundle: ..., traitCollection: ...)`
    static func nowPlaying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nowPlaying, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "People", bundle: ..., traitCollection: ...)`
    static func people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PeopleOutline", bundle: ..., traitCollection: ...)`
    static func peopleOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.peopleOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PhotosInline", bundle: ..., traitCollection: ...)`
    static func photosInline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photosInline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Reply", bundle: ..., traitCollection: ...)`
    static func reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "StreamingStatus", bundle: ..., traitCollection: ...)`
    static func streamingStatus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.streamingStatus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-direct", bundle: ..., traitCollection: ...)`
    static func visibilityDirect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityDirect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-private", bundle: ..., traitCollection: ...)`
    static func visibilityPrivate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPrivate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-public", bundle: ..., traitCollection: ...)`
    static func visibilityPublic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPublic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-unlisted", bundle: ..., traitCollection: ...)`
    static func visibilityUnlisted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityUnlisted, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `MastodonPostCell`.
    static let mastodonPostCell = _R.nib._MastodonPostCell()
    /// Nib `NewPostMediaListViewController`.
    static let newPostMediaListViewController = _R.nib._NewPostMediaListViewController()
    /// Nib `TimeLineReadMoreCell`.
    static let timeLineReadMoreCell = _R.nib._TimeLineReadMoreCell()
    /// Nib `UserProfileBioTableViewCell`.
    static let userProfileBioTableViewCell = _R.nib._UserProfileBioTableViewCell()
    /// Nib `UserProfileInfoTableViewCell`.
    static let userProfileInfoTableViewCell = _R.nib._UserProfileInfoTableViewCell()
    
    /// `UINib(name: "MastodonPostCell", in: bundle)`
    static func mastodonPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mastodonPostCell)
    }
    
    /// `UINib(name: "NewPostMediaListViewController", in: bundle)`
    static func newPostMediaListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newPostMediaListViewController)
    }
    
    /// `UINib(name: "TimeLineReadMoreCell", in: bundle)`
    static func timeLineReadMoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeLineReadMoreCell)
    }
    
    /// `UINib(name: "UserProfileBioTableViewCell", in: bundle)`
    static func userProfileBioTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileBioTableViewCell)
    }
    
    /// `UINib(name: "UserProfileInfoTableViewCell", in: bundle)`
    static func userProfileInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileInfoTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `AddAccountIndexViewController`, and contains static references to 1 segues.
    struct addAccountIndexViewController {
      /// Segue identifier `goProgress`.
      static let goProgress: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountIndexViewController, AddAccountProgressViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goProgress")
      
      /// Optionally returns a typed version of segue `goProgress`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goProgress(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountIndexViewController, AddAccountProgressViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountIndexViewController.goProgress, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AddAccountLoginViewController`, and contains static references to 1 segues.
    struct addAccountLoginViewController {
      /// Segue identifier `backToProgress`.
      static let backToProgress: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountLoginViewController, AddAccountProgressViewController> = Rswift.StoryboardSegueIdentifier(identifier: "backToProgress")
      
      /// Optionally returns a typed version of segue `backToProgress`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func backToProgress(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountLoginViewController, AddAccountProgressViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountLoginViewController.backToProgress, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AddAccountProgressViewController`, and contains static references to 3 segues.
    struct addAccountProgressViewController {
      /// Segue identifier `errorBack`.
      static let errorBack: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountIndexViewController> = Rswift.StoryboardSegueIdentifier(identifier: "errorBack")
      /// Segue identifier `goSelectLoginMethod`.
      static let goSelectLoginMethod: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSelectLoginMethodViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goSelectLoginMethod")
      /// Segue identifier `goSuccess`.
      static let goSuccess: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSuccessViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goSuccess")
      
      /// Optionally returns a typed version of segue `errorBack`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func errorBack(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountIndexViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountProgressViewController.errorBack, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goSelectLoginMethod`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goSelectLoginMethod(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSelectLoginMethodViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountProgressViewController.goSelectLoginMethod, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goSuccess`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goSuccess(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountProgressViewController, AddAccountSuccessViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountProgressViewController.goSuccess, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AddAccountSelectLoginMethodViewController`, and contains static references to 1 segues.
    struct addAccountSelectLoginMethodViewController {
      /// Segue identifier `goMailAddressAndPasswordLogin`.
      static let goMailAddressAndPasswordLogin: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddAccountSelectLoginMethodViewController, AddAccountLoginViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goMailAddressAndPasswordLogin")
      
      /// Optionally returns a typed version of segue `goMailAddressAndPasswordLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goMailAddressAndPasswordLogin(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddAccountSelectLoginMethodViewController, AddAccountLoginViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addAccountSelectLoginMethodViewController.goMailAddressAndPasswordLogin, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `MastodonPostDetail`.
    static let mastodonPostDetail = _R.storyboard.mastodonPostDetail()
    /// Storyboard `NewPost`.
    static let newPost = _R.storyboard.newPost()
    /// Storyboard `ProfileCard`.
    static let profileCard = _R.storyboard.profileCard()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "MastodonPostDetail", bundle: ...)`
    static func mastodonPostDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mastodonPostDetail)
    }
    
    /// `UIStoryboard(name: "NewPost", bundle: ...)`
    static func newPost(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newPost)
    }
    
    /// `UIStoryboard(name: "ProfileCard", bundle: ...)`
    static func profileCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileCard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 31 localization keys.
    struct localizable {
      /// en translation: @% boosted your toot
      /// 
      /// Locales: en, ja
      static let tabsNotificationsCellReblogTitle = Rswift.StringResource(key: "tabs.notifications.cell.reblog.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: @% favorited your toot
      /// 
      /// Locales: en, ja
      static let tabsNotificationsCellFavouriteTitle = Rswift.StringResource(key: "tabs.notifications.cell.favourite.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: @% followed you
      /// 
      /// Locales: en, ja
      static let tabsNotificationsCellFollowTitle = Rswift.StringResource(key: "tabs.notifications.cell.follow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: @% mentioned you
      /// 
      /// Locales: en, ja
      static let tabsNotificationsCellMentionTitle = Rswift.StringResource(key: "tabs.notifications.cell.mention.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja
      static let timelineStreamingActionCancel = Rswift.StringResource(key: "timeline.streaming.action.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Connect
      /// 
      /// Locales: en, ja
      static let timelineStreamingActionConnect = Rswift.StringResource(key: "timeline.streaming.action.connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Connected
      /// 
      /// Locales: en, ja
      static let timelineStreamingStatusConnected = Rswift.StringResource(key: "timeline.streaming.status.connected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Current: @%@
      /// 
      /// Locales: en, ja
      static let tabsOtherSwitchActiveAccountSubTitle = Rswift.StringResource(key: "tabs.other.switchActiveAccount.subTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Disconnect
      /// 
      /// Locales: en, ja
      static let timelineStreamingActionDisconnect = Rswift.StringResource(key: "timeline.streaming.action.disconnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, ja
      static let errorTitle = Rswift.StringResource(key: "error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Fetch failed
      /// 
      /// Locales: en, ja
      static let tabsNotificationsCellReadmoreFetchError = Rswift.StringResource(key: "tabs.notifications.cell.readmore.fetchError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Help / Feedback
      /// 
      /// Locales: en, ja
      static let tabsOtherHelpAndFeedback = Rswift.StringResource(key: "tabs.other.helpAndFeedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, ja
      static let tabsHomeShortTitle = Rswift.StringResource(key: "tabs.home.shortTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Home Timeline
      /// 
      /// Locales: en, ja
      static let tabsHomeTitle = Rswift.StringResource(key: "tabs.home.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: LTL
      /// 
      /// Locales: en, ja
      static let tabsLocalTimelineShortTitle = Rswift.StringResource(key: "tabs.localTimeline.shortTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Lists
      /// 
      /// Locales: en, ja
      static let tabsOtherLists = Rswift.StringResource(key: "tabs.other.lists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Local Timeline
      /// 
      /// Locales: en, ja
      static let tabsLocalTimelineTitle = Rswift.StringResource(key: "tabs.localTimeline.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: My Profile
      /// 
      /// Locales: en, ja
      static let tabsOtherMyProfile = Rswift.StringResource(key: "tabs.other.myProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Not connected
      /// 
      /// Locales: en, ja
      static let timelineStreamingStatusNotConnected = Rswift.StringResource(key: "timeline.streaming.status.notConnected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Nothing more
      /// 
      /// Locales: en, ja
      static let tabsNotificationsCellReadmoreDisabledTitle = Rswift.StringResource(key: "tabs.notifications.cell.readmore.disabledTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Notifications
      /// 
      /// Locales: en, ja
      static let tabsNotificationsTitle = Rswift.StringResource(key: "tabs.notifications.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Others
      /// 
      /// Locales: en, ja
      static let tabsOtherTitle = Rswift.StringResource(key: "tabs.other.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Post
      /// 
      /// Locales: en, ja
      static let timelineToPostButtonTitle = Rswift.StringResource(key: "timeline.toPostButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Read more
      /// 
      /// Locales: en, ja
      static let tabsNotificationsCellReadmoreTitle = Rswift.StringResource(key: "tabs.notifications.cell.readmore.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Refresh
      /// 
      /// Locales: en, ja
      static let timelineStreamingActionRefresh = Rswift.StringResource(key: "timeline.streaming.action.refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, ja
      static let tabsOtherSettings = Rswift.StringResource(key: "tabs.other.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Status: %
      /// 
      /// Locales: en, ja
      static let timelineStreamingStatusBase = Rswift.StringResource(key: "timeline.streaming.status.base", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Streaming
      /// 
      /// Locales: en, ja
      static let timelineStreamingTitle = Rswift.StringResource(key: "timeline.streaming.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Switch active account
      /// 
      /// Locales: en, ja
      static let tabsOtherSwitchActiveAccountTitle = Rswift.StringResource(key: "tabs.other.switchActiveAccount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: This feature requires Mastodon %@ or higher.
      /// 
      /// Locales: en, ja
      static let errorRequiredNewerMastodon = Rswift.StringResource(key: "error.requiredNewerMastodon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: This feature requires iOS %.1f or higher.
      /// 
      /// Locales: en, ja
      static let errorRequiredNewerOS = Rswift.StringResource(key: "error.requiredNewerOS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: @% boosted your toot
      /// 
      /// Locales: en, ja
      static func tabsNotificationsCellReblogTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.cell.reblog.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: @% favorited your toot
      /// 
      /// Locales: en, ja
      static func tabsNotificationsCellFavouriteTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.cell.favourite.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: @% followed you
      /// 
      /// Locales: en, ja
      static func tabsNotificationsCellFollowTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.cell.follow.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: @% mentioned you
      /// 
      /// Locales: en, ja
      static func tabsNotificationsCellMentionTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.cell.mention.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja
      static func timelineStreamingActionCancel(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.action.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connect
      /// 
      /// Locales: en, ja
      static func timelineStreamingActionConnect(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.action.connect", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connected
      /// 
      /// Locales: en, ja
      static func timelineStreamingStatusConnected(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.status.connected", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current: @%@
      /// 
      /// Locales: en, ja
      static func tabsOtherSwitchActiveAccountSubTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("tabs.other.switchActiveAccount.subTitle", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Disconnect
      /// 
      /// Locales: en, ja
      static func timelineStreamingActionDisconnect(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.action.disconnect", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, ja
      static func errorTitle(_: Void = ()) -> String {
        return NSLocalizedString("error.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fetch failed
      /// 
      /// Locales: en, ja
      static func tabsNotificationsCellReadmoreFetchError(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.cell.readmore.fetchError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help / Feedback
      /// 
      /// Locales: en, ja
      static func tabsOtherHelpAndFeedback(_: Void = ()) -> String {
        return NSLocalizedString("tabs.other.helpAndFeedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, ja
      static func tabsHomeShortTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.home.shortTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home Timeline
      /// 
      /// Locales: en, ja
      static func tabsHomeTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.home.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LTL
      /// 
      /// Locales: en, ja
      static func tabsLocalTimelineShortTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.localTimeline.shortTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lists
      /// 
      /// Locales: en, ja
      static func tabsOtherLists(_: Void = ()) -> String {
        return NSLocalizedString("tabs.other.lists", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Local Timeline
      /// 
      /// Locales: en, ja
      static func tabsLocalTimelineTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.localTimeline.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Profile
      /// 
      /// Locales: en, ja
      static func tabsOtherMyProfile(_: Void = ()) -> String {
        return NSLocalizedString("tabs.other.myProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not connected
      /// 
      /// Locales: en, ja
      static func timelineStreamingStatusNotConnected(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.status.notConnected", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nothing more
      /// 
      /// Locales: en, ja
      static func tabsNotificationsCellReadmoreDisabledTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.cell.readmore.disabledTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notifications
      /// 
      /// Locales: en, ja
      static func tabsNotificationsTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Others
      /// 
      /// Locales: en, ja
      static func tabsOtherTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.other.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Post
      /// 
      /// Locales: en, ja
      static func timelineToPostButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("timeline.toPostButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Read more
      /// 
      /// Locales: en, ja
      static func tabsNotificationsCellReadmoreTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.notifications.cell.readmore.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Refresh
      /// 
      /// Locales: en, ja
      static func timelineStreamingActionRefresh(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.action.refresh", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, ja
      static func tabsOtherSettings(_: Void = ()) -> String {
        return NSLocalizedString("tabs.other.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Status: %
      /// 
      /// Locales: en, ja
      static func timelineStreamingStatusBase(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.status.base", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Streaming
      /// 
      /// Locales: en, ja
      static func timelineStreamingTitle(_: Void = ()) -> String {
        return NSLocalizedString("timeline.streaming.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch active account
      /// 
      /// Locales: en, ja
      static func tabsOtherSwitchActiveAccountTitle(_: Void = ()) -> String {
        return NSLocalizedString("tabs.other.switchActiveAccount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This feature requires Mastodon %@ or higher.
      /// 
      /// Locales: en, ja
      static func errorRequiredNewerMastodon(_ value1: String) -> String {
        return String(format: NSLocalizedString("error.requiredNewerMastodon", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: This feature requires iOS %.1f or higher.
      /// 
      /// Locales: en, ja
      static func errorRequiredNewerOS(_ value1: Double) -> String {
        return String(format: NSLocalizedString("error.requiredNewerOS", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.login` struct is generated, and contains static references to 31 localization keys.
    struct login {
      /// en translation: 1 / 4
      /// 
      /// Locales: en, ja
      static let vrU34PZrText = Rswift.StringResource(key: "vrU-34-PZr.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: By logging in, you agree to {tos} and {privacyPolicy} of this instance.
      /// 
      /// Locales: en, ja
      static let loginMethodAcceptTermsTitle = Rswift.StringResource(key: "loginMethod.acceptTerms.title", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Checking server...
      /// 
      /// Locales: en, ja
      static let yQUZVZCdText = Rswift.StringResource(key: "yQU-ZV-ZCd.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Enter instance hostname
      /// 
      /// Locales: en, ja
      static let ryeghc8iText = Rswift.StringResource(key: "RYE-gH-C8i.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Fetching Account Information...
      /// 
      /// Locales: en, ja
      static let authStage4 = Rswift.StringResource(key: "authStage.4", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Fetching Server Information...
      /// 
      /// Locales: en, ja
      static let authStage1 = Rswift.StringResource(key: "authStage.1", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Go to timeline
      /// 
      /// Locales: en, ja
      static let vhHLD1z5NormalTitle = Rswift.StringResource(key: "vhH-lD-1z5.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: How to select login method
      /// 
      /// Locales: en, ja
      static let loginMethodHelpTitle = Rswift.StringResource(key: "loginMethod.help.title", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: How to select method?
      /// 
      /// Locales: en, ja
      static let qZv1VZeeNormalTitle = Rswift.StringResource(key: "qZv-1V-Zee.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Logging in...
      /// 
      /// Locales: en, ja
      static let e3hSrGGoText = Rswift.StringResource(key: "e3h-sr-GGo.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static let hxxWi3lmTitle = Rswift.StringResource(key: "hxx-wi-3lm.title", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static let mwcl4DqaTitle = Rswift.StringResource(key: "MWC-l4-dqa.title", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static let tkdKiKUCNormalTitle = Rswift.StringResource(key: "Tkd-Ki-kUC.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static let yPErJ0gNormalTitle = Rswift.StringResource(key: "9yP-er-J0g.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static let yPErJ0gSelectedTitle = Rswift.StringResource(key: "9yP-er-J0g.selectedTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login with Safari (Recommended)
      /// 
      /// Locales: en, ja
      static let rjAAJcvNormalTitle = Rswift.StringResource(key: "4Rj-aA-jcv.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login with credentials
      /// 
      /// Locales: en, ja
      static let gjd7xUGvText = Rswift.StringResource(key: "gjd-7x-UGv.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Login with credentials
      /// 
      /// Locales: en, ja
      static let uNRDQTp7NormalTitle = Rswift.StringResource(key: "uNR-dQ-Tp7.normalTitle", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Normally, please select "Login with Safari". If "Login with Safari" is not working, please select "Login with credentials". "Login with credentials" may not working on some instances and accounts.
      /// 
      /// Locales: en, ja
      static let loginMethodHelpMessage = Rswift.StringResource(key: "loginMethod.help.message", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, ja
      static let icDSJGQRPlaceholder = Rswift.StringResource(key: "IcD-SJ-gQR.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please Login
      /// 
      /// Locales: en, ja
      static let authStage3 = Rswift.StringResource(key: "authStage.3", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Registering App Information...
      /// 
      /// Locales: en, ja
      static let authStage2 = Rswift.StringResource(key: "authStage.2", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Select login method
      /// 
      /// Locales: en, ja
      static let veUJAMdKText = Rswift.StringResource(key: "veU-jA-mdK.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Welcome,  @%
      /// 
      /// Locales: en, ja
      static let fNLLLNGUText = Rswift.StringResource(key: "fNL-LL-nGU.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: email address
      /// 
      /// Locales: en, ja
      static let hEsGPM5fPlaceholder = Rswift.StringResource(key: "hEs-gP-M5f.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: iMast
      /// 
      /// Locales: en, ja
      static let wqHKGMcdText = Rswift.StringResource(key: "wqH-KG-Mcd.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: mstdn.jp
      /// 
      /// Locales: en, ja
      static let hrIJcFxPPlaceholder = Rswift.StringResource(key: "HrI-Jc-fxP.placeholder", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: privacy policy
      /// 
      /// Locales: en, ja
      static let loginMethodAcceptTermsPrivacyPolicy = Rswift.StringResource(key: "loginMethod.acceptTerms.privacyPolicy", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: terms of service
      /// 
      /// Locales: en, ja
      static let loginMethodAcceptTermsTerms = Rswift.StringResource(key: "loginMethod.acceptTerms.terms", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ログイン
      /// 
      /// Locales: en, ja
      static let eRuFCCfATitle = Rswift.StringResource(key: "eRu-fC-cfA.title", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ログインすると、利用規約及びプライバシーポリシーに同意したことになります。
      /// 
      /// Locales: en, ja
      static let fvR0FAIoText = Rswift.StringResource(key: "FvR-0F-AIo.text", tableName: "Login", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: 1 / 4
      /// 
      /// Locales: en, ja
      static func vrU34PZrText(_: Void = ()) -> String {
        return NSLocalizedString("vrU-34-PZr.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: By logging in, you agree to {tos} and {privacyPolicy} of this instance.
      /// 
      /// Locales: en, ja
      static func loginMethodAcceptTermsTitle(_: Void = ()) -> String {
        return NSLocalizedString("loginMethod.acceptTerms.title", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Checking server...
      /// 
      /// Locales: en, ja
      static func yQUZVZCdText(_: Void = ()) -> String {
        return NSLocalizedString("yQU-ZV-ZCd.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter instance hostname
      /// 
      /// Locales: en, ja
      static func ryeghc8iText(_: Void = ()) -> String {
        return NSLocalizedString("RYE-gH-C8i.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fetching Account Information...
      /// 
      /// Locales: en, ja
      static func authStage4(_: Void = ()) -> String {
        return NSLocalizedString("authStage.4", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fetching Server Information...
      /// 
      /// Locales: en, ja
      static func authStage1(_: Void = ()) -> String {
        return NSLocalizedString("authStage.1", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go to timeline
      /// 
      /// Locales: en, ja
      static func vhHLD1z5NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("vhH-lD-1z5.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How to select login method
      /// 
      /// Locales: en, ja
      static func loginMethodHelpTitle(_: Void = ()) -> String {
        return NSLocalizedString("loginMethod.help.title", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How to select method?
      /// 
      /// Locales: en, ja
      static func qZv1VZeeNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("qZv-1V-Zee.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logging in...
      /// 
      /// Locales: en, ja
      static func e3hSrGGoText(_: Void = ()) -> String {
        return NSLocalizedString("e3h-sr-GGo.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static func hxxWi3lmTitle(_: Void = ()) -> String {
        return NSLocalizedString("hxx-wi-3lm.title", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static func mwcl4DqaTitle(_: Void = ()) -> String {
        return NSLocalizedString("MWC-l4-dqa.title", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static func tkdKiKUCNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Tkd-Ki-kUC.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static func yPErJ0gNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("9yP-er-J0g.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, ja
      static func yPErJ0gSelectedTitle(_: Void = ()) -> String {
        return NSLocalizedString("9yP-er-J0g.selectedTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login with Safari (Recommended)
      /// 
      /// Locales: en, ja
      static func rjAAJcvNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("4Rj-aA-jcv.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login with credentials
      /// 
      /// Locales: en, ja
      static func gjd7xUGvText(_: Void = ()) -> String {
        return NSLocalizedString("gjd-7x-UGv.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login with credentials
      /// 
      /// Locales: en, ja
      static func uNRDQTp7NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("uNR-dQ-Tp7.normalTitle", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Normally, please select "Login with Safari". If "Login with Safari" is not working, please select "Login with credentials". "Login with credentials" may not working on some instances and accounts.
      /// 
      /// Locales: en, ja
      static func loginMethodHelpMessage(_: Void = ()) -> String {
        return NSLocalizedString("loginMethod.help.message", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, ja
      static func icDSJGQRPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("IcD-SJ-gQR.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please Login
      /// 
      /// Locales: en, ja
      static func authStage3(_: Void = ()) -> String {
        return NSLocalizedString("authStage.3", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Registering App Information...
      /// 
      /// Locales: en, ja
      static func authStage2(_: Void = ()) -> String {
        return NSLocalizedString("authStage.2", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select login method
      /// 
      /// Locales: en, ja
      static func veUJAMdKText(_: Void = ()) -> String {
        return NSLocalizedString("veU-jA-mdK.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Welcome,  @%
      /// 
      /// Locales: en, ja
      static func fNLLLNGUText(_: Void = ()) -> String {
        return NSLocalizedString("fNL-LL-nGU.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: email address
      /// 
      /// Locales: en, ja
      static func hEsGPM5fPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("hEs-gP-M5f.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: iMast
      /// 
      /// Locales: en, ja
      static func wqHKGMcdText(_: Void = ()) -> String {
        return NSLocalizedString("wqH-KG-Mcd.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: mstdn.jp
      /// 
      /// Locales: en, ja
      static func hrIJcFxPPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("HrI-Jc-fxP.placeholder", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: privacy policy
      /// 
      /// Locales: en, ja
      static func loginMethodAcceptTermsPrivacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("loginMethod.acceptTerms.privacyPolicy", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: terms of service
      /// 
      /// Locales: en, ja
      static func loginMethodAcceptTermsTerms(_: Void = ()) -> String {
        return NSLocalizedString("loginMethod.acceptTerms.terms", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ログイン
      /// 
      /// Locales: en, ja
      static func eRuFCCfATitle(_: Void = ()) -> String {
        return NSLocalizedString("eRu-fC-cfA.title", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ログインすると、利用規約及びプライバシーポリシーに同意したことになります。
      /// 
      /// Locales: en, ja
      static func fvR0FAIoText(_: Void = ()) -> String {
        return NSLocalizedString("FvR-0F-AIo.text", tableName: "Login", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.newPost` struct is generated, and contains static references to 8 localization keys.
    struct newPost {
      /// en translation:  0
      /// 
      /// Locales: en, ja
      static let zg4V9GJNormalTitle = Rswift.StringResource(key: "9zg-4V-9GJ.normalTitle", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: CW
      /// 
      /// Locales: en, ja
      static let paxYe0d9Title = Rswift.StringResource(key: "pax-Ye-0d9.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: CW Warning text
      /// 
      /// Locales: en, ja
      static let ncKaJwdPlaceholder = Rswift.StringResource(key: "8NC-Ka-Jwd.placeholder", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Compose Post
      /// 
      /// Locales: en, ja
      static let lfAApGmeTitle = Rswift.StringResource(key: "LfA-Ap-gme.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NSFW
      /// 
      /// Locales: en, ja
      static let pddnqDhaTitle = Rswift.StringResource(key: "PDD-NQ-dha.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja
      static let vdu9C5JKTitle = Rswift.StringResource(key: "vdu-9C-5JK.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Siri
      /// 
      /// Locales: en, ja
      static let nxvAb3PETitle = Rswift.StringResource(key: "NXV-Ab-3PE.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: rin@mastodon.example.com Reply to: @uzuki: 凛ちゃんとデートです♪
      /// 
      /// Locales: en, ja
      static let jxIaK2aText = Rswift.StringResource(key: "3JX-ia-k2a.text", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation:  0
      /// 
      /// Locales: en, ja
      static func zg4V9GJNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("9zg-4V-9GJ.normalTitle", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CW
      /// 
      /// Locales: en, ja
      static func paxYe0d9Title(_: Void = ()) -> String {
        return NSLocalizedString("pax-Ye-0d9.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CW Warning text
      /// 
      /// Locales: en, ja
      static func ncKaJwdPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("8NC-Ka-Jwd.placeholder", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Compose Post
      /// 
      /// Locales: en, ja
      static func lfAApGmeTitle(_: Void = ()) -> String {
        return NSLocalizedString("LfA-Ap-gme.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NSFW
      /// 
      /// Locales: en, ja
      static func pddnqDhaTitle(_: Void = ()) -> String {
        return NSLocalizedString("PDD-NQ-dha.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja
      static func vdu9C5JKTitle(_: Void = ()) -> String {
        return NSLocalizedString("vdu-9C-5JK.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Siri
      /// 
      /// Locales: en, ja
      static func nxvAb3PETitle(_: Void = ()) -> String {
        return NSLocalizedString("NXV-Ab-3PE.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: rin@mastodon.example.com Reply to: @uzuki: 凛ちゃんとデートです♪
      /// 
      /// Locales: en, ja
      static func jxIaK2aText(_: Void = ()) -> String {
        return NSLocalizedString("3JX-ia-k2a.text", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.search` struct is generated, and contains static references to 5 localization keys.
    struct search {
      /// ja translation: アカウント
      /// 
      /// Locales: ja, en
      static let sectionsAccountsTitle = Rswift.StringResource(key: "sections.accounts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: トレンドタグ (更新: %@)
      /// 
      /// Locales: ja, en
      static let sectionsTrendTagsTitle = Rswift.StringResource(key: "sections.trendTags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ハッシュタグ
      /// 
      /// Locales: ja, en
      static let sectionsHashtagsTitle = Rswift.StringResource(key: "sections.hashtags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 投稿
      /// 
      /// Locales: ja, en
      static let sectionsPostsTitle = Rswift.StringResource(key: "sections.posts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 検索
      /// 
      /// Locales: ja, en
      static let title = Rswift.StringResource(key: "title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      
      /// ja translation: アカウント
      /// 
      /// Locales: ja, en
      static func sectionsAccountsTitle(_: Void = ()) -> String {
        return NSLocalizedString("sections.accounts.title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: トレンドタグ (更新: %@)
      /// 
      /// Locales: ja, en
      static func sectionsTrendTagsTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("sections.trendTags.title", tableName: "Search", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ja translation: ハッシュタグ
      /// 
      /// Locales: ja, en
      static func sectionsHashtagsTitle(_: Void = ()) -> String {
        return NSLocalizedString("sections.hashtags.title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 投稿
      /// 
      /// Locales: ja, en
      static func sectionsPostsTitle(_: Void = ()) -> String {
        return NSLocalizedString("sections.posts.title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 検索
      /// 
      /// Locales: ja, en
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.userProfile` struct is generated, and contains static references to 18 localization keys.
    struct userProfile {
      /// ja translation: このユーザーは外部インスタンスに所属しているため、一部の数値が正確でない場合があります。
      /// 
      /// Locales: ja, en
      static let federatedUserWarning = Rswift.StringResource(key: "federatedUserWarning", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: アクション
      /// 
      /// Locales: ja, en
      static let actionsTitle = Rswift.StringResource(key: "actions.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: キャンセル
      /// 
      /// Locales: ja, en
      static let actionsCancel = Rswift.StringResource(key: "actions.cancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: トゥート
      /// 
      /// Locales: ja, en
      static let cellsTootsTitle = Rswift.StringResource(key: "cells.toots.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ブロック
      /// 
      /// Locales: ja, en
      static let actionsBlock = Rswift.StringResource(key: "actions.block", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ブロック解除
      /// 
      /// Locales: ja, en
      static let actionsUnblock = Rswift.StringResource(key: "actions.unblock", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: プロフィール
      /// 
      /// Locales: ja, en
      static let title = Rswift.StringResource(key: "title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロワー
      /// 
      /// Locales: ja, en
      static let cellsFollowersTitle = Rswift.StringResource(key: "cells.followers.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static let actionsFollow = Rswift.StringResource(key: "actions.follow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static let cellsFollowingTitle = Rswift.StringResource(key: "cells.following.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォローリクエストを撤回
      /// 
      /// Locales: ja, en
      static let actionsFollowRequestCancel = Rswift.StringResource(key: "actions.followRequestCancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォローリクエスト一覧
      /// 
      /// Locales: ja, en
      static let actionsFollowRequestsList = Rswift.StringResource(key: "actions.followRequestsList", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロー解除
      /// 
      /// Locales: ja, en
      static let actionsUnfollow = Rswift.StringResource(key: "actions.unfollow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ミュート
      /// 
      /// Locales: ja, en
      static let actionsMute = Rswift.StringResource(key: "actions.mute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ミュート解除
      /// 
      /// Locales: ja, en
      static let actionsUnmute = Rswift.StringResource(key: "actions.unmute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 共有
      /// 
      /// Locales: ja, en
      static let actionsShare = Rswift.StringResource(key: "actions.share", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 名刺
      /// 
      /// Locales: ja, en
      static let actionsProfileCard = Rswift.StringResource(key: "actions.profileCard", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 登録日
      /// 
      /// Locales: ja, en
      static let cellsCreatedAtTitle = Rswift.StringResource(key: "cells.createdAt.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      
      /// ja translation: このユーザーは外部インスタンスに所属しているため、一部の数値が正確でない場合があります。
      /// 
      /// Locales: ja, en
      static func federatedUserWarning(_: Void = ()) -> String {
        return NSLocalizedString("federatedUserWarning", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: アクション
      /// 
      /// Locales: ja, en
      static func actionsTitle(_: Void = ()) -> String {
        return NSLocalizedString("actions.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: キャンセル
      /// 
      /// Locales: ja, en
      static func actionsCancel(_: Void = ()) -> String {
        return NSLocalizedString("actions.cancel", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: トゥート
      /// 
      /// Locales: ja, en
      static func cellsTootsTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.toots.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ブロック
      /// 
      /// Locales: ja, en
      static func actionsBlock(_: Void = ()) -> String {
        return NSLocalizedString("actions.block", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ブロック解除
      /// 
      /// Locales: ja, en
      static func actionsUnblock(_: Void = ()) -> String {
        return NSLocalizedString("actions.unblock", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: プロフィール
      /// 
      /// Locales: ja, en
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロワー
      /// 
      /// Locales: ja, en
      static func cellsFollowersTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.followers.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static func actionsFollow(_: Void = ()) -> String {
        return NSLocalizedString("actions.follow", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static func cellsFollowingTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.following.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォローリクエストを撤回
      /// 
      /// Locales: ja, en
      static func actionsFollowRequestCancel(_: Void = ()) -> String {
        return NSLocalizedString("actions.followRequestCancel", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォローリクエスト一覧
      /// 
      /// Locales: ja, en
      static func actionsFollowRequestsList(_: Void = ()) -> String {
        return NSLocalizedString("actions.followRequestsList", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロー解除
      /// 
      /// Locales: ja, en
      static func actionsUnfollow(_: Void = ()) -> String {
        return NSLocalizedString("actions.unfollow", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ミュート
      /// 
      /// Locales: ja, en
      static func actionsMute(_: Void = ()) -> String {
        return NSLocalizedString("actions.mute", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ミュート解除
      /// 
      /// Locales: ja, en
      static func actionsUnmute(_: Void = ()) -> String {
        return NSLocalizedString("actions.unmute", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 共有
      /// 
      /// Locales: ja, en
      static func actionsShare(_: Void = ()) -> String {
        return NSLocalizedString("actions.share", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 名刺
      /// 
      /// Locales: ja, en
      static func actionsProfileCard(_: Void = ()) -> String {
        return NSLocalizedString("actions.profileCard", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 登録日
      /// 
      /// Locales: ja, en
      static func cellsCreatedAtTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.createdAt.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MastodonPostCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MastodonPostCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MastodonPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MastodonPostCell
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NewPostMediaListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NewPostMediaListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TimeLineReadMoreCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimeLineReadMoreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileBioTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileBioTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileBioTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileBioTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileInfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try login.validate()
      try newPost.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddAccountIndexViewController
      
      let bundle = R.hostingBundle
      let logintop = StoryboardViewControllerResource<AddAccountIndexViewController>(identifier: "logintop")
      let name = "Login"
      let progress = StoryboardViewControllerResource<AddAccountProgressViewController>(identifier: "progress")
      
      func logintop(_: Void = ()) -> AddAccountIndexViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logintop)
      }
      
      func progress(_: Void = ()) -> AddAccountProgressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: progress)
      }
      
      static func validate() throws {
        if _R.storyboard.login().progress() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'progress' could not be loaded from storyboard 'Login' as 'AddAccountProgressViewController'.") }
        if _R.storyboard.login().logintop() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logintop' could not be loaded from storyboard 'Login' as 'AddAccountIndexViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct mastodonPostDetail: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MastodonPostDetailTableViewController
      
      let bundle = R.hostingBundle
      let name = "MastodonPostDetail"
      
      fileprivate init() {}
    }
    
    struct newPost: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewPostViewController
      
      let bundle = R.hostingBundle
      let name = "NewPost"
      
      static func validate() throws {
        if UIKit.UIImage(named: "visibility-public") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visibility-public' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Camera' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArrowUp") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowUp' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NowPlaying") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NowPlaying' is used in storyboard 'NewPost', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct profileCard: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ProfileCardViewController
      
      let bundle = R.hostingBundle
      let name = "ProfileCard"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
