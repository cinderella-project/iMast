//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")
    /// Resource file `RubyMikuWorld.bundle`.
    static let rubyMikuWorldBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "RubyMikuWorld", pathExtension: "bundle")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `emoji.json`.
    static let emojiJson = Rswift.FileResource(bundle: R.hostingBundle, name: "emoji", pathExtension: "json")
    
    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RubyMikuWorld", withExtension: "bundle")`
    static func rubyMikuWorldBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubyMikuWorldBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "emoji", withExtension: "json")`
    static func emojiJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emojiJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `ArrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowDown")
    /// Image `ArrowUp`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowUp")
    /// Image `Boost`.
    static let boost = Rswift.ImageResource(bundle: R.hostingBundle, name: "Boost")
    /// Image `Camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera")
    /// Image `Follow`.
    static let follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Follow")
    /// Image `HomeOutline`.
    static let homeOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeOutline")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `MoreOutline`.
    static let moreOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoreOutline")
    /// Image `More`.
    static let more = Rswift.ImageResource(bundle: R.hostingBundle, name: "More")
    /// Image `NotificationOutline`.
    static let notificationOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "NotificationOutline")
    /// Image `Notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notification")
    /// Image `NowPlaying`.
    static let nowPlaying = Rswift.ImageResource(bundle: R.hostingBundle, name: "NowPlaying")
    /// Image `PeopleOutline`.
    static let peopleOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "PeopleOutline")
    /// Image `People`.
    static let people = Rswift.ImageResource(bundle: R.hostingBundle, name: "People")
    /// Image `PhotosInline`.
    static let photosInline = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhotosInline")
    /// Image `Reply`.
    static let reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reply")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `StreamingStatus`.
    static let streamingStatus = Rswift.ImageResource(bundle: R.hostingBundle, name: "StreamingStatus")
    /// Image `visibility-direct`.
    static let visibilityDirect = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-direct")
    /// Image `visibility-private`.
    static let visibilityPrivate = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-private")
    /// Image `visibility-public`.
    static let visibilityPublic = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-public")
    /// Image `visibility-unlisted`.
    static let visibilityUnlisted = Rswift.ImageResource(bundle: R.hostingBundle, name: "visibility-unlisted")
    
    /// `UIImage(named: "ArrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ArrowUp", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Boost", bundle: ..., traitCollection: ...)`
    static func boost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boost, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Follow", bundle: ..., traitCollection: ...)`
    static func follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HomeOutline", bundle: ..., traitCollection: ...)`
    static func homeOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "More", bundle: ..., traitCollection: ...)`
    static func more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MoreOutline", bundle: ..., traitCollection: ...)`
    static func moreOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NotificationOutline", bundle: ..., traitCollection: ...)`
    static func notificationOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notificationOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NowPlaying", bundle: ..., traitCollection: ...)`
    static func nowPlaying(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nowPlaying, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "People", bundle: ..., traitCollection: ...)`
    static func people(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.people, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PeopleOutline", bundle: ..., traitCollection: ...)`
    static func peopleOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.peopleOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PhotosInline", bundle: ..., traitCollection: ...)`
    static func photosInline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photosInline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Reply", bundle: ..., traitCollection: ...)`
    static func reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "StreamingStatus", bundle: ..., traitCollection: ...)`
    static func streamingStatus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.streamingStatus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-direct", bundle: ..., traitCollection: ...)`
    static func visibilityDirect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityDirect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-private", bundle: ..., traitCollection: ...)`
    static func visibilityPrivate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPrivate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-public", bundle: ..., traitCollection: ...)`
    static func visibilityPublic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityPublic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "visibility-unlisted", bundle: ..., traitCollection: ...)`
    static func visibilityUnlisted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visibilityUnlisted, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `AddAccountSuccessViewController`.
    static let addAccountSuccessViewController = _R.nib._AddAccountSuccessViewController()
    /// Nib `MastodonPostCell`.
    static let mastodonPostCell = _R.nib._MastodonPostCell()
    /// Nib `NewPostMediaListViewController`.
    static let newPostMediaListViewController = _R.nib._NewPostMediaListViewController()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `TimeLineReadMoreCell`.
    static let timeLineReadMoreCell = _R.nib._TimeLineReadMoreCell()
    /// Nib `UserProfileBioTableViewCell`.
    static let userProfileBioTableViewCell = _R.nib._UserProfileBioTableViewCell()
    /// Nib `UserProfileInfoTableViewCell`.
    static let userProfileInfoTableViewCell = _R.nib._UserProfileInfoTableViewCell()
    
    /// `UINib(name: "AddAccountSuccessViewController", in: bundle)`
    static func addAccountSuccessViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAccountSuccessViewController)
    }
    
    /// `UINib(name: "MastodonPostCell", in: bundle)`
    static func mastodonPostCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mastodonPostCell)
    }
    
    /// `UINib(name: "NewPostMediaListViewController", in: bundle)`
    static func newPostMediaListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newPostMediaListViewController)
    }
    
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    
    /// `UINib(name: "TimeLineReadMoreCell", in: bundle)`
    static func timeLineReadMoreCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeLineReadMoreCell)
    }
    
    /// `UINib(name: "UserProfileBioTableViewCell", in: bundle)`
    static func userProfileBioTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileBioTableViewCell)
    }
    
    /// `UINib(name: "UserProfileInfoTableViewCell", in: bundle)`
    static func userProfileInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileInfoTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `notificationTableViewCell`.
    static let notificationTableViewCell: Rswift.ReuseIdentifier<NotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "notificationTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MastodonPostDetail`.
    static let mastodonPostDetail = _R.storyboard.mastodonPostDetail()
    /// Storyboard `NewPost`.
    static let newPost = _R.storyboard.newPost()
    /// Storyboard `ProfileCard`.
    static let profileCard = _R.storyboard.profileCard()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MastodonPostDetail", bundle: ...)`
    static func mastodonPostDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mastodonPostDetail)
    }
    
    /// `UIStoryboard(name: "NewPost", bundle: ...)`
    static func newPost(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newPost)
    }
    
    /// `UIStoryboard(name: "ProfileCard", bundle: ...)`
    static func profileCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileCard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 35 localization keys.
    struct localizable {
      /// en translation: @%@ boosted your toot
      /// 
      /// Locales: en, ja
      static let boostedYourToot = Rswift.StringResource(key: "boostedYourToot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: @%@ favorited your toot
      /// 
      /// Locales: en, ja
      static let favouritedYourToot = Rswift.StringResource(key: "favouritedYourToot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: @%@ followed you
      /// 
      /// Locales: en, ja
      static let followedYou = Rswift.StringResource(key: "followedYou", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: @%@ mentioned you
      /// 
      /// Locales: en, ja
      static let mentionedYou = Rswift.StringResource(key: "mentionedYou", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, ja
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Connect
      /// 
      /// Locales: en, ja
      static let connect = Rswift.StringResource(key: "connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Connected
      /// 
      /// Locales: en, ja
      static let connected = Rswift.StringResource(key: "connected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Current: @%@
      /// 
      /// Locales: en, ja
      static let currentAccount = Rswift.StringResource(key: "currentAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Disconnect
      /// 
      /// Locales: en, ja
      static let disconnect = Rswift.StringResource(key: "disconnect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, ja
      static let errorTitle = Rswift.StringResource(key: "error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Fetch failed
      /// 
      /// Locales: en, ja
      static let fetchFailed = Rswift.StringResource(key: "fetchFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Help / Feedback
      /// 
      /// Locales: en, ja
      static let helpAndFeedback = Rswift.StringResource(key: "helpAndFeedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, ja
      static let homeTimelineShort = Rswift.StringResource(key: "homeTimeline.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Home Timeline
      /// 
      /// Locales: en, ja
      static let homeTimeline = Rswift.StringResource(key: "homeTimeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: LTL
      /// 
      /// Locales: en, ja
      static let localTimelineShort = Rswift.StringResource(key: "localTimeline.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Lists
      /// 
      /// Locales: en, ja
      static let lists = Rswift.StringResource(key: "lists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Local Timeline
      /// 
      /// Locales: en, ja
      static let localTimeline = Rswift.StringResource(key: "localTimeline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: My Profile
      /// 
      /// Locales: en, ja
      static let myProfile = Rswift.StringResource(key: "myProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Not connected
      /// 
      /// Locales: en, ja
      static let notConnected = Rswift.StringResource(key: "notConnected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Nothing more
      /// 
      /// Locales: en, ja
      static let nothingMore = Rswift.StringResource(key: "nothingMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Notifications
      /// 
      /// Locales: en, ja
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Others
      /// 
      /// Locales: en, ja
      static let other = Rswift.StringResource(key: "other", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please input instance.
      /// 
      /// Locales: en, ja
      static let errorPleaseInputInstance = Rswift.StringResource(key: "error.pleaseInputInstance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Please input mastodon instance
      /// 
      /// Locales: en, ja
      static let pleaseInputMastodonInstance = Rswift.StringResource(key: "pleaseInputMastodonInstance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Post
      /// 
      /// Locales: en, ja
      static let post = Rswift.StringResource(key: "post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Read more
      /// 
      /// Locales: en, ja
      static let readmore = Rswift.StringResource(key: "readmore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Refresh
      /// 
      /// Locales: en, ja
      static let refetch = Rswift.StringResource(key: "refetch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, ja
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Status: %@
      /// 
      /// Locales: en, ja
      static let streamingStatus = Rswift.StringResource(key: "streamingStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Streaming
      /// 
      /// Locales: en, ja
      static let streaming = Rswift.StringResource(key: "streaming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Switch active account
      /// 
      /// Locales: en, ja
      static let switchActiveAccount = Rswift.StringResource(key: "switchActiveAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: This feature requires Mastodon %@ or higher.
      /// 
      /// Locales: en, ja
      static let errorRequiredNewerMastodon = Rswift.StringResource(key: "error.requiredNewerMastodon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: This feature requires iOS %.1f or higher.
      /// 
      /// Locales: en, ja
      static let errorRequiredNewerOS = Rswift.StringResource(key: "error.requiredNewerOS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Unknown Notification: %@
      /// 
      /// Locales: en, ja
      static let unknownNotificationType = Rswift.StringResource(key: "unknownNotificationType", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: ログイン
      /// 
      /// Locales: en, ja
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: @%@ boosted your toot
      /// 
      /// Locales: en, ja
      static func boostedYourToot(_ value1: String) -> String {
        return String(format: NSLocalizedString("boostedYourToot", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: @%@ favorited your toot
      /// 
      /// Locales: en, ja
      static func favouritedYourToot(_ value1: String) -> String {
        return String(format: NSLocalizedString("favouritedYourToot", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: @%@ followed you
      /// 
      /// Locales: en, ja
      static func followedYou(_ value1: String) -> String {
        return String(format: NSLocalizedString("followedYou", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: @%@ mentioned you
      /// 
      /// Locales: en, ja
      static func mentionedYou(_ value1: String) -> String {
        return String(format: NSLocalizedString("mentionedYou", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, ja
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connect
      /// 
      /// Locales: en, ja
      static func connect(_: Void = ()) -> String {
        return NSLocalizedString("connect", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connected
      /// 
      /// Locales: en, ja
      static func connected(_: Void = ()) -> String {
        return NSLocalizedString("connected", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current: @%@
      /// 
      /// Locales: en, ja
      static func currentAccount(_ value1: String) -> String {
        return String(format: NSLocalizedString("currentAccount", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Disconnect
      /// 
      /// Locales: en, ja
      static func disconnect(_: Void = ()) -> String {
        return NSLocalizedString("disconnect", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, ja
      static func errorTitle(_: Void = ()) -> String {
        return NSLocalizedString("error.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fetch failed
      /// 
      /// Locales: en, ja
      static func fetchFailed(_: Void = ()) -> String {
        return NSLocalizedString("fetchFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help / Feedback
      /// 
      /// Locales: en, ja
      static func helpAndFeedback(_: Void = ()) -> String {
        return NSLocalizedString("helpAndFeedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, ja
      static func homeTimelineShort(_: Void = ()) -> String {
        return NSLocalizedString("homeTimeline.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home Timeline
      /// 
      /// Locales: en, ja
      static func homeTimeline(_: Void = ()) -> String {
        return NSLocalizedString("homeTimeline", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LTL
      /// 
      /// Locales: en, ja
      static func localTimelineShort(_: Void = ()) -> String {
        return NSLocalizedString("localTimeline.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lists
      /// 
      /// Locales: en, ja
      static func lists(_: Void = ()) -> String {
        return NSLocalizedString("lists", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Local Timeline
      /// 
      /// Locales: en, ja
      static func localTimeline(_: Void = ()) -> String {
        return NSLocalizedString("localTimeline", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Profile
      /// 
      /// Locales: en, ja
      static func myProfile(_: Void = ()) -> String {
        return NSLocalizedString("myProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not connected
      /// 
      /// Locales: en, ja
      static func notConnected(_: Void = ()) -> String {
        return NSLocalizedString("notConnected", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nothing more
      /// 
      /// Locales: en, ja
      static func nothingMore(_: Void = ()) -> String {
        return NSLocalizedString("nothingMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notifications
      /// 
      /// Locales: en, ja
      static func notifications(_: Void = ()) -> String {
        return NSLocalizedString("notifications", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Others
      /// 
      /// Locales: en, ja
      static func other(_: Void = ()) -> String {
        return NSLocalizedString("other", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input instance.
      /// 
      /// Locales: en, ja
      static func errorPleaseInputInstance(_: Void = ()) -> String {
        return NSLocalizedString("error.pleaseInputInstance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input mastodon instance
      /// 
      /// Locales: en, ja
      static func pleaseInputMastodonInstance(_: Void = ()) -> String {
        return NSLocalizedString("pleaseInputMastodonInstance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Post
      /// 
      /// Locales: en, ja
      static func post(_: Void = ()) -> String {
        return NSLocalizedString("post", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Read more
      /// 
      /// Locales: en, ja
      static func readmore(_: Void = ()) -> String {
        return NSLocalizedString("readmore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Refresh
      /// 
      /// Locales: en, ja
      static func refetch(_: Void = ()) -> String {
        return NSLocalizedString("refetch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, ja
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Status: %@
      /// 
      /// Locales: en, ja
      static func streamingStatus(_ value1: String) -> String {
        return String(format: NSLocalizedString("streamingStatus", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Streaming
      /// 
      /// Locales: en, ja
      static func streaming(_: Void = ()) -> String {
        return NSLocalizedString("streaming", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch active account
      /// 
      /// Locales: en, ja
      static func switchActiveAccount(_: Void = ()) -> String {
        return NSLocalizedString("switchActiveAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This feature requires Mastodon %@ or higher.
      /// 
      /// Locales: en, ja
      static func errorRequiredNewerMastodon(_ value1: String) -> String {
        return String(format: NSLocalizedString("error.requiredNewerMastodon", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: This feature requires iOS %.1f or higher.
      /// 
      /// Locales: en, ja
      static func errorRequiredNewerOS(_ value1: Double) -> String {
        return String(format: NSLocalizedString("error.requiredNewerOS", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Unknown Notification: %@
      /// 
      /// Locales: en, ja
      static func unknownNotificationType(_ value1: String) -> String {
        return String(format: NSLocalizedString("unknownNotificationType", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: ログイン
      /// 
      /// Locales: en, ja
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.newPost` struct is generated, and contains static references to 8 localization keys.
    struct newPost {
      /// en translation:  0
      /// 
      /// Locales: en, ja
      static let zg4V9GJNormalTitle = Rswift.StringResource(key: "9zg-4V-9GJ.normalTitle", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: CW
      /// 
      /// Locales: en, ja
      static let paxYe0d9Title = Rswift.StringResource(key: "pax-Ye-0d9.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: CW Warning text
      /// 
      /// Locales: en, ja
      static let ncKaJwdPlaceholder = Rswift.StringResource(key: "8NC-Ka-Jwd.placeholder", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Compose Post
      /// 
      /// Locales: en, ja
      static let lfAApGmeTitle = Rswift.StringResource(key: "LfA-Ap-gme.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: NSFW
      /// 
      /// Locales: en, ja
      static let pddnqDhaTitle = Rswift.StringResource(key: "PDD-NQ-dha.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, ja
      static let vdu9C5JKTitle = Rswift.StringResource(key: "vdu-9C-5JK.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Siri
      /// 
      /// Locales: en, ja
      static let nxvAb3PETitle = Rswift.StringResource(key: "NXV-Ab-3PE.title", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: rin@mastodon.example.com Reply to: @uzuki: 凛ちゃんとデートです♪
      /// 
      /// Locales: en, ja
      static let jxIaK2aText = Rswift.StringResource(key: "3JX-ia-k2a.text", tableName: "NewPost", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation:  0
      /// 
      /// Locales: en, ja
      static func zg4V9GJNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("9zg-4V-9GJ.normalTitle", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CW
      /// 
      /// Locales: en, ja
      static func paxYe0d9Title(_: Void = ()) -> String {
        return NSLocalizedString("pax-Ye-0d9.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CW Warning text
      /// 
      /// Locales: en, ja
      static func ncKaJwdPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("8NC-Ka-Jwd.placeholder", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Compose Post
      /// 
      /// Locales: en, ja
      static func lfAApGmeTitle(_: Void = ()) -> String {
        return NSLocalizedString("LfA-Ap-gme.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NSFW
      /// 
      /// Locales: en, ja
      static func pddnqDhaTitle(_: Void = ()) -> String {
        return NSLocalizedString("PDD-NQ-dha.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, ja
      static func vdu9C5JKTitle(_: Void = ()) -> String {
        return NSLocalizedString("vdu-9C-5JK.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Siri
      /// 
      /// Locales: en, ja
      static func nxvAb3PETitle(_: Void = ()) -> String {
        return NSLocalizedString("NXV-Ab-3PE.title", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: rin@mastodon.example.com Reply to: @uzuki: 凛ちゃんとデートです♪
      /// 
      /// Locales: en, ja
      static func jxIaK2aText(_: Void = ()) -> String {
        return NSLocalizedString("3JX-ia-k2a.text", tableName: "NewPost", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.search` struct is generated, and contains static references to 5 localization keys.
    struct search {
      /// ja translation: アカウント
      /// 
      /// Locales: ja, en
      static let sectionsAccountsTitle = Rswift.StringResource(key: "sections.accounts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: トレンドタグ (更新: %@)
      /// 
      /// Locales: ja, en
      static let sectionsTrendTagsTitle = Rswift.StringResource(key: "sections.trendTags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ハッシュタグ
      /// 
      /// Locales: ja, en
      static let sectionsHashtagsTitle = Rswift.StringResource(key: "sections.hashtags.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 投稿
      /// 
      /// Locales: ja, en
      static let sectionsPostsTitle = Rswift.StringResource(key: "sections.posts.title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 検索
      /// 
      /// Locales: ja, en
      static let title = Rswift.StringResource(key: "title", tableName: "Search", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      
      /// ja translation: アカウント
      /// 
      /// Locales: ja, en
      static func sectionsAccountsTitle(_: Void = ()) -> String {
        return NSLocalizedString("sections.accounts.title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: トレンドタグ (更新: %@)
      /// 
      /// Locales: ja, en
      static func sectionsTrendTagsTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("sections.trendTags.title", tableName: "Search", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ja translation: ハッシュタグ
      /// 
      /// Locales: ja, en
      static func sectionsHashtagsTitle(_: Void = ()) -> String {
        return NSLocalizedString("sections.hashtags.title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 投稿
      /// 
      /// Locales: ja, en
      static func sectionsPostsTitle(_: Void = ()) -> String {
        return NSLocalizedString("sections.posts.title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 検索
      /// 
      /// Locales: ja, en
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("title", tableName: "Search", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.userProfile` struct is generated, and contains static references to 18 localization keys.
    struct userProfile {
      /// ja translation: このユーザーは外部インスタンスに所属しているため、一部の数値が正確でない場合があります。
      /// 
      /// Locales: ja, en
      static let federatedUserWarning = Rswift.StringResource(key: "federatedUserWarning", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: アクション
      /// 
      /// Locales: ja, en
      static let actionsTitle = Rswift.StringResource(key: "actions.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: キャンセル
      /// 
      /// Locales: ja, en
      static let actionsCancel = Rswift.StringResource(key: "actions.cancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: トゥート
      /// 
      /// Locales: ja, en
      static let cellsTootsTitle = Rswift.StringResource(key: "cells.toots.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ブロック
      /// 
      /// Locales: ja, en
      static let actionsBlock = Rswift.StringResource(key: "actions.block", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ブロック解除
      /// 
      /// Locales: ja, en
      static let actionsUnblock = Rswift.StringResource(key: "actions.unblock", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: プロフィール
      /// 
      /// Locales: ja, en
      static let title = Rswift.StringResource(key: "title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロワー
      /// 
      /// Locales: ja, en
      static let cellsFollowersTitle = Rswift.StringResource(key: "cells.followers.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static let actionsFollow = Rswift.StringResource(key: "actions.follow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static let cellsFollowingTitle = Rswift.StringResource(key: "cells.following.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォローリクエストを撤回
      /// 
      /// Locales: ja, en
      static let actionsFollowRequestCancel = Rswift.StringResource(key: "actions.followRequestCancel", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォローリクエスト一覧
      /// 
      /// Locales: ja, en
      static let actionsFollowRequestsList = Rswift.StringResource(key: "actions.followRequestsList", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: フォロー解除
      /// 
      /// Locales: ja, en
      static let actionsUnfollow = Rswift.StringResource(key: "actions.unfollow", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ミュート
      /// 
      /// Locales: ja, en
      static let actionsMute = Rswift.StringResource(key: "actions.mute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: ミュート解除
      /// 
      /// Locales: ja, en
      static let actionsUnmute = Rswift.StringResource(key: "actions.unmute", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 共有
      /// 
      /// Locales: ja, en
      static let actionsShare = Rswift.StringResource(key: "actions.share", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 名刺
      /// 
      /// Locales: ja, en
      static let actionsProfileCard = Rswift.StringResource(key: "actions.profileCard", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      /// ja translation: 登録日
      /// 
      /// Locales: ja, en
      static let cellsCreatedAtTitle = Rswift.StringResource(key: "cells.createdAt.title", tableName: "UserProfile", bundle: R.hostingBundle, locales: ["ja", "en"], comment: nil)
      
      /// ja translation: このユーザーは外部インスタンスに所属しているため、一部の数値が正確でない場合があります。
      /// 
      /// Locales: ja, en
      static func federatedUserWarning(_: Void = ()) -> String {
        return NSLocalizedString("federatedUserWarning", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: アクション
      /// 
      /// Locales: ja, en
      static func actionsTitle(_: Void = ()) -> String {
        return NSLocalizedString("actions.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: キャンセル
      /// 
      /// Locales: ja, en
      static func actionsCancel(_: Void = ()) -> String {
        return NSLocalizedString("actions.cancel", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: トゥート
      /// 
      /// Locales: ja, en
      static func cellsTootsTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.toots.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ブロック
      /// 
      /// Locales: ja, en
      static func actionsBlock(_: Void = ()) -> String {
        return NSLocalizedString("actions.block", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ブロック解除
      /// 
      /// Locales: ja, en
      static func actionsUnblock(_: Void = ()) -> String {
        return NSLocalizedString("actions.unblock", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: プロフィール
      /// 
      /// Locales: ja, en
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロワー
      /// 
      /// Locales: ja, en
      static func cellsFollowersTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.followers.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static func actionsFollow(_: Void = ()) -> String {
        return NSLocalizedString("actions.follow", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロー
      /// 
      /// Locales: ja, en
      static func cellsFollowingTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.following.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォローリクエストを撤回
      /// 
      /// Locales: ja, en
      static func actionsFollowRequestCancel(_: Void = ()) -> String {
        return NSLocalizedString("actions.followRequestCancel", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォローリクエスト一覧
      /// 
      /// Locales: ja, en
      static func actionsFollowRequestsList(_: Void = ()) -> String {
        return NSLocalizedString("actions.followRequestsList", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: フォロー解除
      /// 
      /// Locales: ja, en
      static func actionsUnfollow(_: Void = ()) -> String {
        return NSLocalizedString("actions.unfollow", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ミュート
      /// 
      /// Locales: ja, en
      static func actionsMute(_: Void = ()) -> String {
        return NSLocalizedString("actions.mute", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: ミュート解除
      /// 
      /// Locales: ja, en
      static func actionsUnmute(_: Void = ()) -> String {
        return NSLocalizedString("actions.unmute", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 共有
      /// 
      /// Locales: ja, en
      static func actionsShare(_: Void = ()) -> String {
        return NSLocalizedString("actions.share", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 名刺
      /// 
      /// Locales: ja, en
      static func actionsProfileCard(_: Void = ()) -> String {
        return NSLocalizedString("actions.profileCard", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: 登録日
      /// 
      /// Locales: ja, en
      static func cellsCreatedAtTitle(_: Void = ()) -> String {
        return NSLocalizedString("cells.createdAt.title", tableName: "UserProfile", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AddAccountSuccessViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddAccountSuccessViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MastodonPostCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MastodonPostCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MastodonPostCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MastodonPostCell
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NewPostMediaListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NewPostMediaListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NotificationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "notificationTableViewCell"
      let name = "NotificationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TimeLineReadMoreCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimeLineReadMoreCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileBioTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileBioTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileBioTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileBioTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileInfoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProfileInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UserProfileInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserProfileInfoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try newPost.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mastodonPostDetail: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MastodonPostDetailTableViewController
      
      let bundle = R.hostingBundle
      let name = "MastodonPostDetail"
      
      fileprivate init() {}
    }
    
    struct newPost: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewPostViewController
      
      let bundle = R.hostingBundle
      let name = "NewPost"
      
      static func validate() throws {
        if UIKit.UIImage(named: "visibility-public") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'visibility-public' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Camera' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ArrowUp") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ArrowUp' is used in storyboard 'NewPost', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NowPlaying") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NowPlaying' is used in storyboard 'NewPost', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct profileCard: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ProfileCardViewController
      
      let bundle = R.hostingBundle
      let name = "ProfileCard"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
